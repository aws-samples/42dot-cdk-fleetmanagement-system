"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AwsIotCoreProvisioningInfraStack = void 0;
const aws_cdk_lib_1 = require("aws-cdk-lib");
const custom_resources_1 = require("aws-cdk-lib/custom-resources");
const device_policy_json_1 = __importDefault(require("./device/device-policy.json"));
const provisioning_template_json_1 = __importDefault(require("./device/provisioning-template.json"));
const path = __importStar(require("path"));
const config_1 = require("../config/config");
const device_cc_policy_json_1 = __importDefault(require("./device/device-cc-policy.json"));
class AwsIotCoreProvisioningInfraStack extends aws_cdk_lib_1.Stack {
    constructor(scope, id, props) {
        super(scope, id, props);
        // Modify testDevicePolicyJson according to Configs and create device policy for device policy
        device_policy_json_1.default.Statement[1].Resource = [
            `arn:aws:iot:${config_1.Config.aws.region}:${config_1.Config.aws.account}:topic/$aws/rules/*`,
            `arn:aws:iot:${config_1.Config.aws.region}:${config_1.Config.aws.account}:topic/` + '${iot:ClientId}'
        ];
        device_policy_json_1.default.Statement[2].Resource = [
            `arn:aws:iot:${config_1.Config.aws.region}:${config_1.Config.aws.account}:topicfilter/` + '${iot:ClientId}'
        ];
        let testDevicePolicy = new aws_cdk_lib_1.aws_iot.CfnPolicy(this, config_1.Config.app.service + "-" + config_1.Config.app.environment + "device-policy", {
            policyDocument: device_policy_json_1.default,
            policyName: config_1.Config.app.service + "-" + config_1.Config.app.environment + "-device-policy",
        });
        // Create role for pre-provisioning lambda for verification of devices
        let rolePreProvisioningLambda = new aws_cdk_lib_1.aws_iam.Role(this, config_1.Config.app.service + "-" + config_1.Config.app.environment + "-pre-provisioning-lambda-role", {
            assumedBy: new aws_cdk_lib_1.aws_iam.ServicePrincipal("lambda.amazonaws.com"),
            description: "AWS IAM role for pre-provisioning lambda",
            roleName: config_1.Config.app.service + "-" + config_1.Config.app.environment + "-pre-provisioning-lambda-role",
        });
        // Crate lambda for pre-provisioning hook and add permission for invoke
        let lambdaPreProvisioningHook = new aws_cdk_lib_1.aws_lambda.Function(this, config_1.Config.app.service + "-" + config_1.Config.app.environment +
            "-pre-provisioning-hook-lambda", {
            code: aws_cdk_lib_1.aws_lambda.Code.fromAsset(path.join(__dirname, "device")),
            handler: "lambda_function.lambda_handler",
            runtime: aws_cdk_lib_1.aws_lambda.Runtime.PYTHON_3_9,
            role: rolePreProvisioningLambda,
            description: "Lambda for pre-provisioning hook",
            functionName: config_1.Config.app.service + "-" + config_1.Config.app.environment + "-pre-provisioning-hook-lambda",
        });
        lambdaPreProvisioningHook.addPermission("InvokePermission", {
            principal: new aws_cdk_lib_1.aws_iam.ServicePrincipal("iot.amazonaws.com"),
            action: "lambda:InvokeFunction",
        });
        // Crate role for provisioning templates and add AWSIoTThingsRegistration policy
        let roleProvisioning = new aws_cdk_lib_1.aws_iam.Role(this, config_1.Config.app.service + "-" + config_1.Config.app.environment + "-provisioning-template-role", {
            assumedBy: new aws_cdk_lib_1.aws_iam.ServicePrincipal("iot.amazonaws.com"),
            description: "AWS IAM role for provisioning services",
            roleName: config_1.Config.app.service + "-" + config_1.Config.app.environment + "-provisioning-template-role",
        });
        roleProvisioning.addManagedPolicy(aws_cdk_lib_1.aws_iam.ManagedPolicy.fromAwsManagedPolicyName("service-role/AWSIoTThingsRegistration"));
        // Create provisioning template
        provisioning_template_json_1.default.Resources.policy.Properties.PolicyName = testDevicePolicy.policyName;
        let testProvisioningTemplate = new aws_cdk_lib_1.aws_iot.CfnProvisioningTemplate(this, config_1.Config.app.service + "-" + config_1.Config.app.environment + "-provision-template", {
            provisioningRoleArn: roleProvisioning.roleArn,
            templateBody: JSON.stringify(provisioning_template_json_1.default),
            enabled: true,
            preProvisioningHook: {
                "payloadVersion": "2020-04-01",
                "targetArn": lambdaPreProvisioningHook.functionArn
            },
            description: "AWS IoT Provisioning Template",
            templateName: config_1.Config.app.service + "-" + config_1.Config.app.environment + "-provision-template",
        });
        // Modify testDeviceClaimCertificatePolicyJson and create vehicle gateway policy for Claim Certificate
        let templateTopicCreate = `arn:aws:iot:${config_1.Config.aws.region}:${config_1.Config.aws.account}:topic/$aws/certificates/create/*`;
        let templateTopicProvisioning = `arn:aws:iot:${config_1.Config.aws.region}:${config_1.Config.aws.account}:topic/$aws/provisioning-templates/${testProvisioningTemplate.templateName}/provision/*`;
        device_cc_policy_json_1.default.Statement[1].Resource = [templateTopicCreate, templateTopicProvisioning];
        let templateTopicFilterCreate = `arn:aws:iot:${config_1.Config.aws.region}:${config_1.Config.aws.account}:topicfilter/$aws/certificates/create/*`;
        let templateTopicFilterProvisioning = `arn:aws:iot:${config_1.Config.aws.region}:${config_1.Config.aws.account}:topicfilter/$aws/provisioning-templates/${testProvisioningTemplate.templateName}/provision/*`;
        device_cc_policy_json_1.default.Statement[2].Resource = [templateTopicFilterCreate, templateTopicFilterProvisioning];
        let testDeviceClaimCertificatePolicy = new aws_cdk_lib_1.aws_iot.CfnPolicy(this, config_1.Config.app.service + "-" + config_1.Config.app.environment + "-claim-certificate-policy", {
            policyDocument: device_cc_policy_json_1.default,
            policyName: config_1.Config.app.service + "-" + config_1.Config.app.environment + "-claim-certificate-policy",
        });
        // Create claim certificate by using AwsCustomResource
        let createKeysAndCertificateForClaimCertificate = new custom_resources_1.AwsCustomResource(this, config_1.Config.app.service + "-" + config_1.Config.app.environment + "-create-keys-and-certificate-for-claim-certificate", {
            onUpdate: {
                service: "Iot",
                action: "createKeysAndCertificate",
                parameters: { setAsActive: true },
                physicalResourceId: custom_resources_1.PhysicalResourceId.fromResponse("certificateId"),
                outputPaths: ["certificateArn", "certificatePem", "keyPair.PublicKey", "keyPair.PrivateKey"],
            },
            policy: custom_resources_1.AwsCustomResourcePolicy.fromSdkCalls({ resources: custom_resources_1.AwsCustomResourcePolicy.ANY_RESOURCE }),
        });
        // Attach policy to claim certificate
        let PolicyPrincipalAttachmentForClaimCertificate = new aws_cdk_lib_1.aws_iot.CfnPolicyPrincipalAttachment(this, config_1.Config.app.service + "-" + config_1.Config.app.environment + "policy-principal-attachment", {
            policyName: testDeviceClaimCertificatePolicy.policyName,
            principal: createKeysAndCertificateForClaimCertificate.getResponseField("certificateArn"),
        });
        let cdkTestS3Bucket = new aws_cdk_lib_1.aws_s3.Bucket(this, 'cdkTestS3Bucket', {
            blockPublicAccess: aws_cdk_lib_1.aws_s3.BlockPublicAccess.BLOCK_ALL,
            versioned: true,
            removalPolicy: aws_cdk_lib_1.RemovalPolicy.RETAIN_ON_UPDATE_OR_DELETE,
            // autoDeleteObjects: true,
            bucketName: config_1.Config.s3BucketName
        });
        // Save the vehicle-gateway certificates and keys to S3
        let keyDeploymentForDeviceClaimCertificate = new aws_cdk_lib_1.aws_s3_deployment.BucketDeployment(this, config_1.Config.app.service + "-" + config_1.Config.app.environment + "put-key-to-s3", {
            destinationBucket: cdkTestS3Bucket,
            sources: [
                aws_cdk_lib_1.aws_s3_deployment.Source.data("claim-certificate/claim.pem", createKeysAndCertificateForClaimCertificate.getResponseField("certificatePem")),
                aws_cdk_lib_1.aws_s3_deployment.Source.data("claim-certificate/claim.public.key", createKeysAndCertificateForClaimCertificate.getResponseField("keyPair.PublicKey")),
                aws_cdk_lib_1.aws_s3_deployment.Source.data("claim-certificate/claim.private.key", createKeysAndCertificateForClaimCertificate.getResponseField("keyPair.PrivateKey")),
            ],
        });
    }
}
exports.AwsIotCoreProvisioningInfraStack = AwsIotCoreProvisioningInfraStack;
//# sourceMappingURL=data:application/json;base64,